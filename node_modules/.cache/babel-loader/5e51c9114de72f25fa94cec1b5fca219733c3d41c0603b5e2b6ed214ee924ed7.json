{"ast":null,"code":"var _jsxFileName = \"/Users/matthew/Desktop/pm-test-react-2/src/components/Attributes/Attributes.js\",\n  _s = $RefreshSig$();\n/* import React, { useState, useEffect } from 'react'\n\n\nconst Attributes = (props) => {\n\n    const { attr_list, attributes, setAttributes, skills_list } = props\n    const [abilityModifiers, setAbilityModifiers] = useState({});\n    const [skills, setSkills] = useState([])\n    const [totalPoints, setTotalPoints] = useState()\n\n    useEffect(() => {\n        const newAbilityModifiers = {};\n        for (const attribute in attributes) {\n            const value = attributes[attribute];\n            const modifier = Math.max(Math.floor((value - 10) / 2), 0);\n            newAbilityModifiers[attribute] = modifier;\n        }\n        setAbilityModifiers(newAbilityModifiers);\n        setTotalPoints(10 + (4 * newAbilityModifiers[\"Intelligence\"]))\n\n\n\n    }, [attributes]);\n\n    useEffect(() => {\n        const newSkillsList = [];\n        for (const skill in skills_list) {\n\n            const skillName = skills_list[skill].name\n            const skillAttributeModifier = skills_list[skill].attributeModifier\n            const skillPoints = 0\n            const skillModifier = abilityModifiers[skills_list[skill].attributeModifier]\n            const skillTotal = skillModifier + skillPoints\n            newSkillsList.push({ skillName, skillAttributeModifier, skillPoints, skillTotal, skillModifier })\n\n        }\n        setSkills(newSkillsList)\n        console.log(abilityModifiers['Dexterity'])\n\n    }, [abilityModifiers])\n\n    //console.log(skills)\n\n    //console.log(Object.entries(skills_list))\n\n    const handleSkillInc = (skillIndex) => {\n        const updatedSkills = [...skills]\n        updatedSkills[skillIndex].skillPoints += 1\n        updatedSkills[skillIndex].skillTotal = updatedSkills[skillIndex].skillPoints + updatedSkills[skillIndex].skillModifier\n        updatedSkills[skillIndex].skillModifier = abilityModifiers[updatedSkills[skillIndex].skillAttributeModifier];\n        //console.log(updatedSkills)\n        setSkills(updatedSkills)\n    }\n\n\n\n    const handleIncrement = (attribute) => {\n        const updatedAttributes = { ...attributes, [attribute]: attributes[attribute] + 1, };\n        setAttributes(updatedAttributes);\n    };\n\n    const handleDecrement = (attribute) => {\n        const updatedAttributes = { ...attributes, [attribute]: Math.max(attributes[attribute] - 1, 1), };\n        setAttributes(updatedAttributes);\n    };\n\n\n\n\n\n    return (\n        <>\n            <h2>Attributes:</h2>\n            {attr_list.map((attribute) => (\n                <div key={attribute}>\n                    <div>{`${attribute}: `}\n                        <span>{attributes[attribute]}</span>\n                        <button onClick={() => handleDecrement(attribute)}>-</button>\n                        <button onClick={() => handleIncrement(attribute)}>+</button>\n                        <div>Ability Modifier: {abilityModifiers[attribute]}</div>\n\n                    </div>\n\n                </div>\n            ))}\n            <h2>Total Points Available: {totalPoints}</h2>\n\n            <h2>Skills:</h2>\n            {skills.map((skill, index) => {\n                return (\n                    <div key={index}>{skill.skillName}\n                        &nbsp;points: {skill.skillPoints} &nbsp;\n                        <button onClick={() => handleSkillInc(index)}>+</button>\n                        &nbsp;\n                        <button>-</button>\n                        &nbsp; modifier: {skill.skillModifier}\n                        &nbsp; total: {skill.skillTotal}\n                    </div>\n                )\n\n            })}\n\n        </>\n    );\n};\n\nexport default Attributes */\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Attributes = props => {\n  _s();\n  const {\n    attr_list,\n    attributes,\n    setAttributes,\n    skills_list\n  } = props;\n  const [abilityModifiers, setAbilityModifiers] = useState({});\n  const [totalPoints, setTotalPoints] = useState();\n  useEffect(() => {\n    const newAbilityModifiers = {};\n    for (const attribute in attributes) {\n      const value = attributes[attribute];\n      const modifier = Math.max(Math.floor((value - 10) / 2), 0);\n      newAbilityModifiers[attribute] = modifier;\n    }\n    setAbilityModifiers(newAbilityModifiers);\n    setTotalPoints(10 + 4 * newAbilityModifiers['Intelligence']);\n  }, [attributes]);\n  const handleIncrement = attribute => {\n    const updatedAttributes = {\n      ...attributes,\n      [attribute]: attributes[attribute] + 1\n    };\n    setAttributes(updatedAttributes);\n  };\n  const handleDecrement = attribute => {\n    const updatedAttributes = {\n      ...attributes,\n      [attribute]: Math.max(attributes[attribute] - 1, 1)\n    };\n    setAttributes(updatedAttributes);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Attributes:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), attr_list.map(attribute => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [`${attribute}: `, /*#__PURE__*/_jsxDEV(\"span\", {\n          children: attributes[attribute]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDecrement(attribute),\n          children: \"-\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleIncrement(attribute),\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Ability Modifier: \", abilityModifiers[attribute]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this)\n    }, attribute, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Total Points Available: \", totalPoints]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Skills:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), skills_list.map(skill => {\n      const skillModifier = abilityModifiers[skill.attributeModifier];\n      const skillTotal = skillModifier + skill.points;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [skill.name, \"\\xA0points: \", skill.points, \" \\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => props.handleSkillInc(skill),\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"-\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this), \"\\xA0 modifier: \", skillModifier, \"\\xA0 total: \", skillTotal]\n      }, skill.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true);\n};\n_s(Attributes, \"BVXoj3QISWSGLLiTyqaKisYEXco=\");\n_c = Attributes;\nexport default Attributes;\nvar _c;\n$RefreshReg$(_c, \"Attributes\");","map":{"version":3,"names":["React","useState","useEffect","Attributes","props","attr_list","attributes","setAttributes","skills_list","abilityModifiers","setAbilityModifiers","totalPoints","setTotalPoints","newAbilityModifiers","attribute","value","modifier","Math","max","floor","handleIncrement","updatedAttributes","handleDecrement","map","skill","skillModifier","attributeModifier","skillTotal","points","name","handleSkillInc"],"sources":["/Users/matthew/Desktop/pm-test-react-2/src/components/Attributes/Attributes.js"],"sourcesContent":["/* import React, { useState, useEffect } from 'react'\n\n\nconst Attributes = (props) => {\n\n    const { attr_list, attributes, setAttributes, skills_list } = props\n    const [abilityModifiers, setAbilityModifiers] = useState({});\n    const [skills, setSkills] = useState([])\n    const [totalPoints, setTotalPoints] = useState()\n\n    useEffect(() => {\n        const newAbilityModifiers = {};\n        for (const attribute in attributes) {\n            const value = attributes[attribute];\n            const modifier = Math.max(Math.floor((value - 10) / 2), 0);\n            newAbilityModifiers[attribute] = modifier;\n        }\n        setAbilityModifiers(newAbilityModifiers);\n        setTotalPoints(10 + (4 * newAbilityModifiers[\"Intelligence\"]))\n\n\n\n    }, [attributes]);\n\n    useEffect(() => {\n        const newSkillsList = [];\n        for (const skill in skills_list) {\n\n            const skillName = skills_list[skill].name\n            const skillAttributeModifier = skills_list[skill].attributeModifier\n            const skillPoints = 0\n            const skillModifier = abilityModifiers[skills_list[skill].attributeModifier]\n            const skillTotal = skillModifier + skillPoints\n            newSkillsList.push({ skillName, skillAttributeModifier, skillPoints, skillTotal, skillModifier })\n\n        }\n        setSkills(newSkillsList)\n        console.log(abilityModifiers['Dexterity'])\n\n    }, [abilityModifiers])\n\n    //console.log(skills)\n\n    //console.log(Object.entries(skills_list))\n\n    const handleSkillInc = (skillIndex) => {\n        const updatedSkills = [...skills]\n        updatedSkills[skillIndex].skillPoints += 1\n        updatedSkills[skillIndex].skillTotal = updatedSkills[skillIndex].skillPoints + updatedSkills[skillIndex].skillModifier\n        updatedSkills[skillIndex].skillModifier = abilityModifiers[updatedSkills[skillIndex].skillAttributeModifier];\n        //console.log(updatedSkills)\n        setSkills(updatedSkills)\n    }\n\n\n\n    const handleIncrement = (attribute) => {\n        const updatedAttributes = { ...attributes, [attribute]: attributes[attribute] + 1, };\n        setAttributes(updatedAttributes);\n    };\n\n    const handleDecrement = (attribute) => {\n        const updatedAttributes = { ...attributes, [attribute]: Math.max(attributes[attribute] - 1, 1), };\n        setAttributes(updatedAttributes);\n    };\n\n\n\n\n\n    return (\n        <>\n            <h2>Attributes:</h2>\n            {attr_list.map((attribute) => (\n                <div key={attribute}>\n                    <div>{`${attribute}: `}\n                        <span>{attributes[attribute]}</span>\n                        <button onClick={() => handleDecrement(attribute)}>-</button>\n                        <button onClick={() => handleIncrement(attribute)}>+</button>\n                        <div>Ability Modifier: {abilityModifiers[attribute]}</div>\n\n                    </div>\n\n                </div>\n            ))}\n            <h2>Total Points Available: {totalPoints}</h2>\n\n            <h2>Skills:</h2>\n            {skills.map((skill, index) => {\n                return (\n                    <div key={index}>{skill.skillName}\n                        &nbsp;points: {skill.skillPoints} &nbsp;\n                        <button onClick={() => handleSkillInc(index)}>+</button>\n                        &nbsp;\n                        <button>-</button>\n                        &nbsp; modifier: {skill.skillModifier}\n                        &nbsp; total: {skill.skillTotal}\n                    </div>\n                )\n\n            })}\n\n        </>\n    );\n};\n\nexport default Attributes */\n\nimport React, { useState, useEffect } from 'react'\n\nconst Attributes = (props) => {\n  const { attr_list, attributes, setAttributes, skills_list } = props\n  const [abilityModifiers, setAbilityModifiers] = useState({})\n  const [totalPoints, setTotalPoints] = useState()\n\n  useEffect(() => {\n    const newAbilityModifiers = {}\n    for (const attribute in attributes) {\n      const value = attributes[attribute]\n      const modifier = Math.max(Math.floor((value - 10) / 2), 0)\n      newAbilityModifiers[attribute] = modifier\n    }\n    setAbilityModifiers(newAbilityModifiers)\n    setTotalPoints(10 + 4 * newAbilityModifiers['Intelligence'])\n  }, [attributes])\n\n  const handleIncrement = (attribute) => {\n    const updatedAttributes = { ...attributes, [attribute]: attributes[attribute] + 1 }\n    setAttributes(updatedAttributes)\n  }\n\n  const handleDecrement = (attribute) => {\n    const updatedAttributes = { ...attributes, [attribute]: Math.max(attributes[attribute] - 1, 1) }\n    setAttributes(updatedAttributes)\n  }\n\n  return (\n    <>\n      <h2>Attributes:</h2>\n      {attr_list.map((attribute) => (\n        <div key={attribute}>\n          <div>\n            {`${attribute}: `}\n            <span>{attributes[attribute]}</span>\n            <button onClick={() => handleDecrement(attribute)}>-</button>\n            <button onClick={() => handleIncrement(attribute)}>+</button>\n            <div>Ability Modifier: {abilityModifiers[attribute]}</div>\n          </div>\n        </div>\n      ))}\n      <h2>Total Points Available: {totalPoints}</h2>\n\n      <h2>Skills:</h2>\n      {skills_list.map((skill) => {\n        const skillModifier = abilityModifiers[skill.attributeModifier]\n        const skillTotal = skillModifier + skill.points\n        return (\n          <div key={skill.name}>\n            {skill.name}\n            &nbsp;points: {skill.points} &nbsp;\n            <button onClick={() => props.handleSkillInc(skill)}>+</button>\n            &nbsp;\n            <button>-</button>\n            &nbsp; modifier: {skillModifier}\n            &nbsp; total: {skillTotal}\n          </div>\n        )\n      })}\n    </>\n  )\n}\n\nexport default Attributes\n"],"mappingslD,MAAMC,UAAU,GAAIC,KAAK,IAAK;EAAA;EAC5B,MAAM;IAAEC,SAAS;IAAEC,UAAU;IAAEC,aAAa;IAAEC;EAAY,CAAC,GAAGJ,KAAK;EACnE,MAAM,CAACK,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5D,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,EAAE;EAEhDC,SAAS,CAAC,MAAM;IACd,MAAMW,mBAAmB,GAAG,CAAC,CAAC;IAC9B,KAAK,MAAMC,SAAS,IAAIR,UAAU,EAAE;MAClC,MAAMS,KAAK,GAAGT,UAAU,CAACQ,SAAS,CAAC;MACnC,MAAME,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,KAAK,CAAC,CAACJ,KAAK,GAAG,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;MAC1DF,mBAAmB,CAACC,SAAS,CAAC,GAAGE,QAAQ;IAC3C;IACAN,mBAAmB,CAACG,mBAAmB,CAAC;IACxCD,cAAc,CAAC,EAAE,GAAG,CAAC,GAAGC,mBAAmB,CAAC,cAAc,CAAC,CAAC;EAC9D,CAAC,EAAE,CAACP,UAAU,CAAC,CAAC;EAEhB,MAAMc,eAAe,GAAIN,SAAS,IAAK;IACrC,MAAMO,iBAAiB,GAAG;MAAE,GAAGf,UAAU;MAAE,CAACQ,SAAS,GAAGR,UAAU,CAACQ,SAAS,CAAC,GAAG;IAAE,CAAC;IACnFP,aAAa,CAACc,iBAAiB,CAAC;EAClC,CAAC;EAED,MAAMC,eAAe,GAAIR,SAAS,IAAK;IACrC,MAAMO,iBAAiB,GAAG;MAAE,GAAGf,UAAU;MAAE,CAACQ,SAAS,GAAGG,IAAI,CAACC,GAAG,CAACZ,UAAU,CAACQ,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC;IAAE,CAAC;IAChGP,aAAa,CAACc,iBAAiB,CAAC;EAClC,CAAC;EAED,oBACE;IAAA,wBACE;MAAA,UAAI;IAAW;MAAA;MAAA;MAAA;IAAA,QAAK,EACnBhB,SAAS,CAACkB,GAAG,CAAET,SAAS,iBACvB;MAAA,uBACE;QAAA,WACI,GAAEA,SAAU,IAAG,eACjB;UAAA,UAAOR,UAAU,CAACQ,SAAS;QAAC;UAAA;UAAA;UAAA;QAAA,QAAQ,eACpC;UAAQ,OAAO,EAAE,MAAMQ,eAAe,CAACR,SAAS,CAAE;UAAA,UAAC;QAAC;UAAA;UAAA;UAAA;QAAA,QAAS,eAC7D;UAAQ,OAAO,EAAE,MAAMM,eAAe,CAACN,SAAS,CAAE;UAAA,UAAC;QAAC;UAAA;UAAA;UAAA;QAAA,QAAS,eAC7D;UAAA,WAAK,oBAAkB,EAACL,gBAAgB,CAACK,SAAS,CAAC;QAAA;UAAA;UAAA;UAAA;QAAA,QAAO;MAAA;QAAA;QAAA;QAAA;MAAA;IACtD,GAPEA,SAAS;MAAA;MAAA;MAAA;IAAA,QASpB,CAAC,eACF;MAAA,WAAI,0BAAwB,EAACH,WAAW;IAAA;MAAA;MAAA;MAAA;IAAA,QAAM,eAE9C;MAAA,UAAI;IAAO;MAAA;MAAA;MAAA;IAAA,QAAK,EACfH,WAAW,CAACe,GAAG,CAAEC,KAAK,IAAK;MAC1B,MAAMC,aAAa,GAAGhB,gBAAgB,CAACe,KAAK,CAACE,iBAAiB,CAAC;MAC/D,MAAMC,UAAU,GAAGF,aAAa,GAAGD,KAAK,CAACI,MAAM;MAC/C,oBACE;QAAA,WACGJ,KAAK,CAACK,IAAI,EAAC,cACE,EAACL,KAAK,CAACI,MAAM,EAAC,OAC5B;UAAQ,OAAO,EAAE,MAAMxB,KAAK,CAAC0B,cAAc,CAACN,KAAK,CAAE;UAAA,UAAC;QAAC;UAAA;UAAA;UAAA;QAAA,QAAS,QAE9D;UAAA,UAAQ;QAAC;UAAA;UAAA;UAAA;QAAA,QAAS,mBACD,EAACC,aAAa,EAAC,cAClB,EAACE,UAAU;MAAA,GAPjBH,KAAK,CAACK,IAAI;QAAA;QAAA;QAAA;MAAA,QAQd;IAEV,CAAC,CAAC;EAAA,gBACD;AAEP,CAAC;AAAA,GA5DK1B,UAAU;AAAA,KAAVA,UAAU;AA8DhB,eAAeA,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}